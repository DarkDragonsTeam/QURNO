# We tell docker compose which version to use.
version: '3.9'

# Here we launch the services related to the project, which is the same as the various Docker containers.
# IMPORTANT: IN Docker Compose SYSTEM, THE "$" SIGN IS KNOW AS A VARIABLE, SO IF YOU WANT TO USE "$", TYPE IT TWICE ($$)
services:
  # The db service is related to database management. It is like running a database on a separate server.
  # The db service settings are completely separate from the services related to our project
  # (although we use it in our project), but they are generally set up separately.
  # Note: If you do not need the PostgreSQL database management system, you can put the whole service in comment mode.
  db:
    # We tell this service in Docker what image to use. Docker now uses the latest version of PostgreSQL image and
    # installs it on a proprietary operating system.
    image: postgres:latest

    # The restart feature prevents the database from shutting down completely if the database crashes.
    restart: always

    # PostgreSQL and database environmental variables are set here. We determine (except HOST and PORT) what our
    # database is used for, what its name is, and what its password is.
    env_file:
      - ./db.env

    # The volume attribute creates a shared environment between your operating system and the Docker operating system.
    # Here we have created a volume between the database directory and the PostgreSQL folder (in Docker OS) to ensure
    # that the information remains in your system and is not deleted.
    volumes:
      - './database:/var/lib/postgresql/data'

    # Here we need to configure how we can access PostgreSQL hosting in Docker.
    ports:
      - "5432:5432"

  # Here we create a service called the web to be able to access our website development resources and somehow run and
  # manage it.
  web:
    # Naturally, Docker asks us, so where is the picture? We tell Docker that we have already designed the image.
    # You can build it here.
    build: .

    # We need to give a command to Docker to run the website for us.
    # What command is needed in Django? runserver. Because the runserver takes over all of our development services.
    command: python /code/manage.py runserver 0.0.0.0:8000

    # Here you can set your project environment variables so that you can call them later (os.environ["TARGET"])
    env_file:
      - ./web.env

    # Here, too, we create a volume so that our encoding location is equal to the live Docker encoding location in
    # docker compose.
    volumes:
      - .:/code

    # It is true that Django Server uses port 8000, but this port is only for Docker operating system and is not
    # available for our operating system, so we have to connect it to our system with one port. In fact, we equate the
    # 8000 port in our system with the 8000 port in Docker.
    ports:
      - "8000:8000"

    # With this property, we understand to Docker that these two services are interconnected and connected.
    # If you are using a SQLite database or a specific external database (any database other than Docker Database),
    # change this to comment mode.
    depends_on:
      - db
